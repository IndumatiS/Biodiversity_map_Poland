library(shiny)
library(leaflet)
library(RColorBrewer)

ui <- bootstrapPage(
    tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
    leafletOutput("map", width = "100%", height = "100%"),
    absolutePanel(top = 10, right = 10,
                  selectizeInput("Vernacular_name", "Select common name", choice = NULL
                              ),
                    plotOutput("graph")
                  )
)

server <- function(input, output, session) {
    require(input$Vernacular_name)
    
    updateSelectizeInput(session, "Vernacular_name", choices = unique(sample$vernacularName), server = TRUE)

    output$map <- renderLeaflet({
        sample%>% 
            filter(.,vernacularName == input$Vernacular_name)%>%
            leaflet() %>%
            addTiles() %>%
            addMarkers(lng= ~longitudeDecimal, lat=~latitudeDecimal, 
                       popup = ~paste(vernacularName, scientificName, sep = '<br/>'))
    })
    
    output$graph<-renderPlot({
        sample%>% 
            filter(.,vernacularName== input$Vernacular_name)%>%
            ggplot(aes(x=eventDate, y=individualCount))+
            geom_point()
    })
    
    # Use a separate observer to recreate the legend as needed.
    observe({
        proxy <- leafletProxy("map", data = quakes)
        
        # Remove any existing legend, and only if the legend is
        # enabled, create a new one.
        proxy %>% clearControls()
        #if (input$legend) {
           #pal <- colorpal()
            #proxy %>% addLegend(position = "bottomright",
                                #pal = pal, values = ~mag
            #)
        #}
    })
}

shinyApp(ui, server)
