#Libraries
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)

#Load the data
Poland_data<-read.csv("./data/Poland_data.csv")
Poland_data$eventDate<-(strptime(Poland_data$eventDate, format = "%Y-%m-%d"))
Poland_data$eventDate<-as.POSIXct(Poland_data$eventDate, format = "%d-%m-%Y")

#-----------Rshiny------------------------


ui <- bootstrapPage(
    tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
    leafletOutput("map", width = "100%", height = "100%"),
    absolutePanel(top = 10, right = 10,
                  selectizeInput("Vernacular_name", "Select common name", choice = NULL
                  ),
                  plotOutput("graph")
    )
)

server <- function(input, output, session) {
    
    updateSelectizeInput(session, "Vernacular_name", choices = unique(Poland_data$vernacularName), server = TRUE)
    
    #Create base map
    map_reactive <- reactive({
        req(input$Vernacular_name)
        Poland_data%>% 
            filter(.,vernacularName == input$Vernacular_name)%>%
            leaflet() %>%
            addTiles() %>%
            addMarkers(lng= ~longitudeDecimal, lat=~latitudeDecimal, 
                       popup = ~paste(vernacularName, scientificName, sep = '<br/>'))
    })
    
    # Call the reactive map of the world to render on the screen
    output$map <- renderLeaflet({
        map_reactive()
    })
    
    output$graph<-renderPlot({
        Poland_data%>% 
            filter(.,vernacularName== input$Vernacular_name)%>%
            ggplot(aes(x=eventDate, y=individualCount))+
            geom_point()+
            xlab("Timeline (years)") +
            ylab ("Occurance")
    })
    
}

shinyApp(ui, server)
