#Libraries
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(leaflet)
library(DT)

#Load the data
Poland_data<-read.csv("./data/Poland_data.csv")
Poland_data$eventDate<-(strptime(Poland_data$eventDate, format = "%Y-%m-%d"))
Poland_data$eventDate<-as.POSIXct(Poland_data$eventDate, format = "%d-%m-%Y")

#-----------Rshiny------------------------

#-----------UI trial--------------------
header<-dashboardHeader(title="Poland biodiversity map")

body<-dashboardBody(
    fluidRow(
        column(width = 9,
               box(width = NULL, solidHeader = TRUE,
                   tags$style(type = "text/css", "#map {height: calc(100vh - 80px) !important;}"),
                   leafletOutput("map")
               ),
               
        ),
        column(width=3,
               box(width=NULL,
                   selectInput("Select_animals", "How do you wish to select animals?", choice = c("Vernacular name", "Scientific name")),
                   selectizeInput("Vernacular_name", "Select common name", choice = NULL),
                   #uiOutput("moreControls"),
                   checkboxInput("city", "Include City of London?",TRUE)
                   
               ),
               box(width=NULL,
                   plotOutput("graph") 
               )
               
        )
    )
)

ui<-dashboardPage(
    header,
    dashboardSidebar(disable = TRUE),
    body
)


server <- function(input, output, session) {
    
    updateSelectizeInput(session, "Vernacular_name", choices = unique(Poland_data$vernacularName), server = TRUE)
    
    #Selection of animals-more options
    output$moreControls <- renderUI({
        req(input$Select_animals)
        if(input$Select_animals== "Vernacular name"){
            updateSelectizeInput(session, "Vernacular_name", choices = unique(Poland_data$vernacularName), server = TRUE)
        }
        
        else {
            #updateSelectizeInput(session, "Vernacular_name", choices = unique(Poland_data$scientificName), server = TRUE)
        }
    
    })
    
    #Create base map
    map_reactive <- reactive({
        req(input$Vernacular_name)
        Poland_data%>% 
            filter(.,vernacularName == input$Vernacular_name)%>%
            leaflet() %>%
            addTiles() %>%
            addMarkers(lng= ~longitudeDecimal, lat=~latitudeDecimal, 
                       popup = ~paste(vernacularName, scientificName, sep = '<br/>'))
    })
    
    # Call the reactive map of the world to render on the screen
    output$map <- renderLeaflet({
        map_reactive()
    })
    
    #Create graph for timeline vs occurrence
    output$graph<-renderPlot({
        Poland_data%>% 
            filter(.,vernacularName== input$Vernacular_name)%>%
            ggplot(aes(x=eventDate, y=individualCount))+
            geom_point()+
            xlab("Timeline (years)") +
            ylab ("Occurance")
    })
    
}

shinyApp(ui, server)
